#!/usr/bin/env python3
"""
Script training model DQN
Ch·∫°y ƒë·ªôc l·∫≠p, kh√¥ng c·∫ßn web interface
"""

import os
import json
import time
from datetime import datetime
from playlist_generator import PlaylistGenerator
from models import DQNModel, PlaylistEnvironment
from config import Config

def add_training_log(message, logs_list):
    """Th√™m log training v·ªõi timestamp"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    log_entry = f"[{timestamp}] {message}"
    logs_list.append(log_entry)
    print(log_entry, flush=True)

def main():
    print("üß† KI·ªÇM TRA V√Ä TRAINING MODEL DQN")
    print("=" * 50)
    
    # Ki·ªÉm tra d·ªØ li·ªáu
    if not os.path.exists(Config.PLAYLIST_DATA_FILE):
        print("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu!")
        print(f"   Vui l√≤ng ch·∫°y collect_data.py tr∆∞·ªõc")
        return
    
    # Ki·ªÉm tra model ƒë√£ c√≥ ch∆∞a
    model_path = 'models/dqn_model.h5'
    if os.path.exists(model_path):
        print(f"‚úÖ ƒê√£ t√¨m th·∫•y model hi·ªán c√≥: {model_path}")
        
        # Ki·ªÉm tra th√¥ng tin model
        try:
            generator = PlaylistGenerator()
            if generator.load_data():
                print(f"üìä D·ªØ li·ªáu: {len(generator.songs_data)} b√†i h√°t")
                
                choice = input("\n‚ùì B·∫°n c√≥ mu·ªën training l·∫°i model kh√¥ng? (y/N): ").lower().strip()
                if choice != 'y':
                    print("‚úÖ Gi·ªØ nguy√™n model hi·ªán c√≥!")
                    print("üéâ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng ƒë·ªÉ s·ª≠ d·ª•ng!")
                    return
                else:
                    print("üîÑ B·∫Øt ƒë·∫ßu training l·∫°i model...")
            else:
                print("‚ö†Ô∏è Kh√¥ng th·ªÉ load d·ªØ li·ªáu, b·∫Øt ƒë·∫ßu training m·ªõi...")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra model: {e}")
            print("üîÑ B·∫Øt ƒë·∫ßu training m·ªõi...")
    else:
        print("üìä Ch∆∞a c√≥ model, b·∫Øt ƒë·∫ßu training...")
    
    # Kh·ªüi t·∫°o generator
    print("\nüìä ƒêang load d·ªØ li·ªáu...")
    generator = PlaylistGenerator()
    if not generator.load_data():
        print("‚ùå Kh√¥ng th·ªÉ load d·ªØ li·ªáu!")
        return
    
    print(f"‚úÖ ƒê√£ load {len(generator.songs_data)} b√†i h√°t")
    
    # H·ªèi s·ªë episodes
    try:
        episodes = int(input("Nh·∫≠p s·ªë episodes training (m·∫∑c ƒë·ªãnh 20): ") or "20")
    except ValueError:
        episodes = 20
    
    print(f"üéØ S·∫Ω training {episodes} episodes")
    print()
    
    # B·∫Øt ƒë·∫ßu training
    training_logs = []
    
    try:
        # T·∫°o embeddings n·∫øu ch∆∞a c√≥
        if not generator.embeddings:
            print("üîÑ ƒêang t·∫°o embeddings...")
            add_training_log("T·∫°o embeddings cho b√†i h√°t...", training_logs)
            generator.create_embeddings()
            add_training_log("Embeddings ho√†n th√†nh!", training_logs)
            print()
        
        # T·∫°o environment
        print("üîÑ ƒêang t·∫°o environment...")
        add_training_log("Kh·ªüi t·∫°o environment v√† model...", training_logs)
        generator.environment = PlaylistEnvironment(generator.songs_data, generator.embeddings)
        print(f"‚úÖ Environment c√≥ {len(generator.environment.available_songs)} b√†i h√°t available")
        
        # T·∫°o DQN model
        state_size = Config.EMBEDDING_DIM
        action_size = len(generator.songs_data)
        generator.dqn_model = DQNModel(state_size, action_size)
        print(f"‚úÖ DQN model: state_size={state_size}, action_size={action_size}")
        print()
        
        # B·∫Øt ƒë·∫ßu training
        add_training_log(f"B·∫Øt ƒë·∫ßu training {episodes} episodes...", training_logs)
        print("=" * 60)
        
        start_time = time.time()
        
        for episode in range(episodes):
            # Log progress
            if episode == 0 or episode % 10 == 0:
                progress = (episode / episodes) * 100
                add_training_log(f"Episode {episode}/{episodes} ({progress:.1f}%)", training_logs)
            
            # Train m·ªôt episode
            try:
                state = generator.environment.reset()
                total_reward = 0
                steps = 0
                
                while True:
                    try:
                        action = generator.dqn_model.act(state, generator.environment.available_songs)
                        next_state, reward, done, _ = generator.environment.step(action)
                        generator.dqn_model.remember(state, action, reward, next_state, done)
                        
                        state = next_state
                        total_reward += reward
                        steps += 1
                        
                        if len(generator.dqn_model.memory) > 32:
                            generator.dqn_model.replay(32)
                        
                        if done:
                            break
                            
                    except Exception as step_error:
                        add_training_log(f"L·ªói trong step {steps} c·ªßa episode {episode}: {str(step_error)}", training_logs)
                        break
                
                # Log k·∫øt qu·∫£ episode
                add_training_log(f"Episode {episode}: Ho√†n th√†nh v·ªõi {steps} steps, reward = {total_reward:.2f}", training_logs)
                
                # Log chi ti·∫øt m·ªói 10 episodes (tr·ª´ episode 0)
                if episode % 10 == 0 and episode > 0:
                    add_training_log(f"Episode {episode}: Total Reward = {total_reward:.2f}, Steps = {steps}, Epsilon = {generator.dqn_model.epsilon:.3f}", training_logs)
                    add_training_log(f"Memory size: {len(generator.dqn_model.memory)}, Available songs: {len(generator.environment.available_songs)}", training_logs)
                    print("-" * 40)
                    
            except Exception as e:
                add_training_log(f"L·ªói trong episode {episode}: {str(e)}", training_logs)
                continue
        
        # Ho√†n th√†nh
        end_time = time.time()
        training_time = end_time - start_time
        
        add_training_log("Training ho√†n th√†nh!", training_logs)
        
        # L∆∞u model
        add_training_log("L∆∞u model...", training_logs)
        os.makedirs('models', exist_ok=True)
        generator.dqn_model.save('models/dqn_model.h5')
        add_training_log("Model ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!", training_logs)
        
        # Th·ªëng k√™ cu·ªëi c√πng
        add_training_log("Th·ªëng k√™ cu·ªëi c√πng:", training_logs)
        add_training_log(f"   - T·ªïng episodes: {episodes}", training_logs)
        add_training_log(f"   - Th·ªùi gian training: {training_time:.2f} gi√¢y", training_logs)
        add_training_log(f"   - Epsilon cu·ªëi: {generator.dqn_model.epsilon:.3f}", training_logs)
        add_training_log(f"   - Memory size: {len(generator.dqn_model.memory)}", training_logs)
        
        print()
        print("‚úÖ TRAINING HO√ÄN TH√ÄNH TH√ÄNH C√îNG!")
        print(f"üìÅ Model ƒë∆∞·ª£c l∆∞u t·∫°i: models/dqn_model.h5")
        print(f"‚è±Ô∏è  Th·ªùi gian training: {training_time:.2f} gi√¢y")
        
    except Exception as e:
        print()
        print(f"‚ùå L·ªñI TRAINING: {str(e)}")
        add_training_log(f"L·ªói training: {e}", training_logs)

if __name__ == "__main__":
    main() 